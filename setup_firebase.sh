#!/bin/bash

# 🔥 Firebase Setup Script for E-commerce Flutter App

echo "🔥 Firebase Setup for E-commerce Flutter App"
echo "=============================================="

echo ""
echo "📋 Prerequisites Checklist:"
echo "- [ ] Created Firebase project at https://console.firebase.google.com/"
echo "- [ ] Enabled Authentication (Email/Password + Google)"
echo "- [ ] Created Firestore database in test mode"
echo "- [ ] Added Web app to Firebase project"
echo "- [ ] Copied Firebase configuration values"
echo ""

read -p "Have you completed all prerequisites? (y/n): " prerequisites

if [ "$prerequisites" != "y" ]; then
    echo ""
    echo "❌ Please complete the prerequisites first:"
    echo "1. Go to https://console.firebase.google.com/"
    echo "2. Create a new project named 'flutter-ecommerce-2024'"
    echo "3. Enable Authentication → Email/Password + Google"
    echo "4. Create Firestore Database → Test Mode"
    echo "5. Add Web App → Copy the config"
    echo ""
    echo "Then run this script again."
    exit 1
fi

echo ""
echo "🔧 Setting up Firebase configuration..."

# Get Firebase config values from user
echo ""
echo "📝 Please enter your Firebase configuration values:"
echo "(You can find these in Firebase Console → Project Settings → Web App)"

read -p "Enter your API Key: " api_key
read -p "Enter your App ID: " app_id
read -p "Enter your Messaging Sender ID: " sender_id
read -p "Enter your Project ID: " project_id
read -p "Enter your Measurement ID (G-XXXXXXXXXX): " measurement_id
read -p "Enter your Google Web Client ID (xxx.apps.googleusercontent.com): " google_client_id

# Validate inputs
if [ -z "$api_key" ] || [ -z "$app_id" ] || [ -z "$sender_id" ] || [ -z "$project_id" ]; then
    echo "❌ All fields are required. Please run the script again."
    exit 1
fi

auth_domain="$project_id.firebaseapp.com"
storage_bucket="$project_id.appspot.com"

echo ""
echo "🔄 Updating Firebase configuration files..."

# Update firebase_options.dart
cat > lib/firebase_options.dart << EOF
// File generated by FlutterFire CLI.
// ignore_for_file: type=lint
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;

/// Default [FirebaseOptions] for use with your Firebase apps.
class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      return web;
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        return macos;
      case TargetPlatform.windows:
        return windows;
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static const FirebaseOptions web = FirebaseOptions(
    apiKey: '$api_key',
    appId: '$app_id',
    messagingSenderId: '$sender_id',
    projectId: '$project_id',
    authDomain: '$auth_domain',
    storageBucket: '$storage_bucket',
    measurementId: '$measurement_id',
  );

  static const FirebaseOptions android = FirebaseOptions(
    apiKey: '$api_key',
    appId: '$app_id',
    messagingSenderId: '$sender_id',
    projectId: '$project_id',
    storageBucket: '$storage_bucket',
  );

  static const FirebaseOptions ios = FirebaseOptions(
    apiKey: '$api_key',
    appId: '$app_id',
    messagingSenderId: '$sender_id',
    projectId: '$project_id',
    storageBucket: '$storage_bucket',
    iosClientId: '$google_client_id',
    iosBundleId: 'com.example.ecommerceApp',
  );

  static const FirebaseOptions macos = FirebaseOptions(
    apiKey: '$api_key',
    appId: '$app_id',
    messagingSenderId: '$sender_id',
    projectId: '$project_id',
    storageBucket: '$storage_bucket',
    iosClientId: '$google_client_id',
    iosBundleId: 'com.example.ecommerceApp',
  );

  static const FirebaseOptions windows = FirebaseOptions(
    apiKey: '$api_key',
    appId: '$app_id',
    messagingSenderId: '$sender_id',
    projectId: '$project_id',
    authDomain: '$auth_domain',
    storageBucket: '$storage_bucket',
    measurementId: '$measurement_id',
  );
}
EOF

# Update web/index.html Firebase config
sed -i.bak "s/YOUR_WEB_API_KEY_HERE/$api_key/g" web/index.html
sed -i.bak "s/your-project-id/$project_id/g" web/index.html
sed -i.bak "s/YOUR_SENDER_ID_HERE/$sender_id/g" web/index.html
sed -i.bak "s/YOUR_WEB_APP_ID_HERE/$app_id/g" web/index.html
sed -i.bak "s/G-XXXXXXXXXX/$measurement_id/g" web/index.html

# Update Google Client ID in auth_provider.dart
if [ ! -z "$google_client_id" ]; then
    sed -i.bak "s/YOUR_WEB_CLIENT_ID_HERE.apps.googleusercontent.com/$google_client_id/g" lib/providers/auth_provider.dart
fi

echo ""
echo "✅ Configuration files updated successfully!"

echo ""
echo "🧹 Cleaning and rebuilding project..."
flutter clean
flutter pub get

echo ""
echo "🚀 Starting the application..."
echo "The app will be available at: http://localhost:3000"
echo ""

# Start the app
flutter run -d web-server --web-port=3000

echo ""
echo "🎉 Firebase setup completed!"
echo ""
echo "📝 Next steps:"
echo "1. Test email/password registration"
echo "2. Test Google Sign-In"
echo "3. Check Firebase Console for user data"
echo "4. Update Firestore security rules for production"
echo ""
echo "🔗 Useful links:"
echo "- Firebase Console: https://console.firebase.google.com/project/$project_id"
echo "- Firestore: https://console.firebase.google.com/project/$project_id/firestore"
echo "- Authentication: https://console.firebase.google.com/project/$project_id/authentication"