# üî• Firebase Setup Script for E-commerce Flutter App (Windows PowerShell)

Write-Host "üî• Firebase Setup for E-commerce Flutter App" -ForegroundColor Cyan
Write-Host "==============================================`n" -ForegroundColor Cyan

Write-Host "üìã Prerequisites Checklist:" -ForegroundColor Yellow
Write-Host "- [ ] Created Firebase project at https://console.firebase.google.com/"
Write-Host "- [ ] Enabled Authentication (Email/Password + Google)"
Write-Host "- [ ] Created Firestore database in test mode"
Write-Host "- [ ] Added Web app to Firebase project"
Write-Host "- [ ] Copied Firebase configuration values`n"

$prerequisites = Read-Host "Have you completed all prerequisites? (y/n)"

if ($prerequisites -ne "y") {
    Write-Host "`n‚ùå Please complete the prerequisites first:" -ForegroundColor Red
    Write-Host "1. Go to https://console.firebase.google.com/"
    Write-Host "2. Create a new project named 'flutter-ecommerce-2024'"
    Write-Host "3. Enable Authentication ‚Üí Email/Password + Google"
    Write-Host "4. Create Firestore Database ‚Üí Test Mode"
    Write-Host "5. Add Web App ‚Üí Copy the config`n"
    Write-Host "Then run this script again."
    exit 1
}

Write-Host "`nüîß Setting up Firebase configuration..." -ForegroundColor Green

# Get Firebase config values from user
Write-Host "`nüìù Please enter your Firebase configuration values:" -ForegroundColor Yellow
Write-Host "(You can find these in Firebase Console ‚Üí Project Settings ‚Üí Web App)`n"

$api_key = Read-Host "Enter your API Key"
$app_id = Read-Host "Enter your App ID"
$sender_id = Read-Host "Enter your Messaging Sender ID"
$project_id = Read-Host "Enter your Project ID"
$measurement_id = Read-Host "Enter your Measurement ID (G-XXXXXXXXXX)"
$google_client_id = Read-Host "Enter your Google Web Client ID (xxx.apps.googleusercontent.com)"

# Validate inputs
if ([string]::IsNullOrEmpty($api_key) -or [string]::IsNullOrEmpty($app_id) -or [string]::IsNullOrEmpty($sender_id) -or [string]::IsNullOrEmpty($project_id)) {
    Write-Host "‚ùå All fields are required. Please run the script again." -ForegroundColor Red
    exit 1
}

$auth_domain = "$project_id.firebaseapp.com"
$storage_bucket = "$project_id.appspot.com"

Write-Host "`nüîÑ Updating Firebase configuration files..." -ForegroundColor Green

# Update firebase_options.dart
$firebaseOptionsContent = @"
// File generated by FlutterFire CLI.
// ignore_for_file: type=lint
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;

/// Default [FirebaseOptions] for use with your Firebase apps.
class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      return web;
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        return macos;
      case TargetPlatform.windows:
        return windows;
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static const FirebaseOptions web = FirebaseOptions(
    apiKey: '$api_key',
    appId: '$app_id',
    messagingSenderId: '$sender_id',
    projectId: '$project_id',
    authDomain: '$auth_domain',
    storageBucket: '$storage_bucket',
    measurementId: '$measurement_id',
  );

  static const FirebaseOptions android = FirebaseOptions(
    apiKey: '$api_key',
    appId: '$app_id',
    messagingSenderId: '$sender_id',
    projectId: '$project_id',
    storageBucket: '$storage_bucket',
  );

  static const FirebaseOptions ios = FirebaseOptions(
    apiKey: '$api_key',
    appId: '$app_id',
    messagingSenderId: '$sender_id',
    projectId: '$project_id',
    storageBucket: '$storage_bucket',
    iosClientId: '$google_client_id',
    iosBundleId: 'com.example.ecommerceApp',
  );

  static const FirebaseOptions macos = FirebaseOptions(
    apiKey: '$api_key',
    appId: '$app_id',
    messagingSenderId: '$sender_id',
    projectId: '$project_id',
    storageBucket: '$storage_bucket',
    iosClientId: '$google_client_id',
    iosBundleId: 'com.example.ecommerceApp',
  );

  static const FirebaseOptions windows = FirebaseOptions(
    apiKey: '$api_key',
    appId: '$app_id',
    messagingSenderId: '$sender_id',
    projectId: '$project_id',
    authDomain: '$auth_domain',
    storageBucket: '$storage_bucket',
    measurementId: '$measurement_id',
  );
}
"@

$firebaseOptionsContent | Out-File -FilePath "lib\firebase_options.dart" -Encoding UTF8

# Update web/index.html Firebase config
$indexHtmlPath = "web\index.html"
if (Test-Path $indexHtmlPath) {
    $indexContent = Get-Content $indexHtmlPath -Raw
    $indexContent = $indexContent -replace 'YOUR_WEB_API_KEY_HERE', $api_key
    $indexContent = $indexContent -replace 'your-project-id', $project_id
    $indexContent = $indexContent -replace 'YOUR_SENDER_ID_HERE', $sender_id
    $indexContent = $indexContent -replace 'YOUR_WEB_APP_ID_HERE', $app_id
    $indexContent = $indexContent -replace 'G-XXXXXXXXXX', $measurement_id
    $indexContent | Out-File -FilePath $indexHtmlPath -Encoding UTF8
}

# Update Google Client ID in auth_provider.dart
$authProviderPath = "lib\providers\auth_provider.dart"
if (Test-Path $authProviderPath -and -not [string]::IsNullOrEmpty($google_client_id)) {
    $authContent = Get-Content $authProviderPath -Raw
    $authContent = $authContent -replace 'YOUR_WEB_CLIENT_ID_HERE\.apps\.googleusercontent\.com', $google_client_id
    $authContent | Out-File -FilePath $authProviderPath -Encoding UTF8
}

Write-Host "`n‚úÖ Configuration files updated successfully!" -ForegroundColor Green

Write-Host "`nüßπ Cleaning and rebuilding project..." -ForegroundColor Yellow
flutter clean
flutter pub get

Write-Host "`nüöÄ Starting the application..." -ForegroundColor Cyan
Write-Host "The app will be available at: http://localhost:3000`n"

# Start the app
flutter run -d web-server --web-port=3000

Write-Host "`nüéâ Firebase setup completed!" -ForegroundColor Green
Write-Host "`nüìù Next steps:"
Write-Host "1. Test email/password registration"
Write-Host "2. Test Google Sign-In"
Write-Host "3. Check Firebase Console for user data"
Write-Host "4. Update Firestore security rules for production`n"

Write-Host "üîó Useful links:"
Write-Host "- Firebase Console: https://console.firebase.google.com/project/$project_id"
Write-Host "- Firestore: https://console.firebase.google.com/project/$project_id/firestore"
Write-Host "- Authentication: https://console.firebase.google.com/project/$project_id/authentication"